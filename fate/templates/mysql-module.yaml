########################################################
# Copyright 2019-2020 program was created VMware, Inc. #
# SPDX-License-Identifier: Apache-2.0                  #
########################################################

{{ if .Values.modules.mysql.include }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  labels:
    fateMoudle: mysql
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate
data:
  create-meta-service.sql: |
    -- insertSelective database if not exists
    CREATE DATABASE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`;
    
    USE `{{ .Values.mysql.mysql_database | default "fate" }}`;
    -- insertSelective table for fdn_meta
    
    -- table
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (
      `table_id` SERIAL PRIMARY KEY,
      `namespace` VARCHAR(2000) NOT NULL DEFAULT 'DEFAULT',
      `table_name` VARCHAR(2000) NOT NULL,
      `table_type` VARCHAR(255) NOT NULL,
      `total_fragments` INT UNSIGNED NOT NULL,
      `dispatcher` VARCHAR(2000) NOT NULL DEFAULT 'DEFAULT',
      `serdes` VARCHAR(2000) NOT NULL DEFAULT 'MOD',
      `storage_version` INT UNSIGNED NOT NULL DEFAULT 0,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        
    CREATE UNIQUE INDEX `idx_u_table_n_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`namespace`(100), `table_name`(600), `table_type`(68));
    CREATE INDEX `idx_table_np` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`namespace`(768));
    CREATE INDEX `idx_table_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`table_name`(768));
    CREATE INDEX `idx_table_tt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`table_type`(255));
    CREATE INDEX `idx_table_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`status`(255));
    CREATE INDEX `idx_table_sd` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`serdes`(768));
    CREATE INDEX `idx_table_sv` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`storage_version`);
    
    
    -- fragment
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (
      `fragment_id` SERIAL PRIMARY KEY,
      `table_id` BIGINT UNSIGNED NOT NULL,
      `node_id` BIGINT UNSIGNED NOT NULL,
      `fragment_order` INT UNSIGNED NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    CREATE UNIQUE INDEX `idx_u_fragment_ti_ni_fo` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`table_id`, `node_id`, `fragment_order`);
    CREATE INDEX `idx_fragment_ti` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`table_id`);
    CREATE INDEX `idx_fragment_ni` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`node_id`);
    CREATE INDEX `idx_fragment_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`status`(255));
    
    
    -- node
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (
      `node_id` SERIAL PRIMARY KEY,
      `host` VARCHAR(1000),
      `ip` VARCHAR(255) NOT NULL,
      `port` INT NOT NULL,
      `type` VARCHAR(255) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `last_heartbeat_at` DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    CREATE INDEX `idx_node_h` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`host`(768));
    CREATE INDEX `idx_node_i` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`ip`(255));
    CREATE INDEX `idx_node_t` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`type`(255));
    CREATE INDEX `idx_node_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`status`(255));
    
    
    -- task
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (
      `task_id` SERIAL PRIMARY KEY,
      `task_name` VARCHAR(2000) NOT NULL,
      `task_type` VARCHAR(255) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    CREATE UNIQUE INDEX `idx_u_task_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`task_name`(768));
    CREATE INDEX `idx_task_tt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`task_type`(255));
    CREATE INDEX `idx_task_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`status`(255));
    
    -- result
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (
      `result_id` SERIAL PRIMARY KEY,
      `result_name` VARCHAR(2000),
      `result_type` VARCHAR(2000) NOT NULL,
      `value` VARCHAR(10000) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `task_id` BIGINT UNSIGNED,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    CREATE INDEX `idx_result_rn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`result_name`(768));
    CREATE INDEX `idx_result_rt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`result_type`(768));
    CREATE INDEX `idx_result_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`status`(255));
    CREATE INDEX `idx_result_ti` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`task_id`);
    
  insert-node.sql: |
    use {{ .Values.mysql.mysql_database | default "fate" }};
    INSERT INTO node (ip, port, type, status) values ('{{ .Values.modules.roll.ip }}', '8011', 'ROLL', 'HEALTHY');
    INSERT INTO node (ip, port, type, status) values ('{{ .Values.modules.proxy.ip }}', '9370', 'PROXY', 'HEALTHY');
    {{- range .Values.eggList }}
    INSERT INTO node (ip, port, type, status) values ('{{ .egg }}', '7888', 'EGG', 'HEALTHY');
    INSERT INTO node (ip, port, type, status) values ('{{ .egg }}', '7778', 'STORAGE', 'HEALTHY');
    {{- end }}
    show tables;
    select * from node;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    fateMoudle: mysql
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      fateMoudle: mysql
      name: {{ .Values.partyName | quote  }}
      partyId: {{ .Values.partyId | quote  }}
  template:
    metadata:
      labels:
        fateMoudle: mysql
        name: {{ .Values.partyName | quote  }}
        partyId: {{ .Values.partyId | quote  }}
        owner: kubefate
        cluster: fate
    spec:
      containers:
        {{ if .Values.image.isThridParty}}
        - image: {{ .Values.image.registry }}/mysql:8
        {{ else }}
        - image: mysql:8
        {{- end }}
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: {{ .Values.mysql.mysql_root_password }}
            - name: MYSQL_DATABASE
              value: {{ .Values.mysql.mysql_database }}
            - name: MYSQL_USER
              value: {{ .Values.mysql.mysql_user }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.mysql.mysql_password }}
            - name: user
              value: root
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-confs
              mountPath: /docker-entrypoint-initdb.d/
            {{- if and .Values.nfspath ( .Values.nfsserver ) }}
            - name: mysql-persistent-storage
              subPath: mysql-{{ .Values.partyId }}
              mountPath: /var/lib/mysql
            {{- end }}
      {{ if .Values.nodeSelector.mysql.value}}
      nodeSelector:
        {{ .Values.nodeSelector.mysql.nodeLabel }}: {{ .Values.nodeSelector.mysql.value }}
      {{ end }}
      volumes:
        - name: mysql-confs
          configMap:
            name: mysql-config
        {{- if and .Values.nfspath ( .Values.nfsserver ) }}
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: {{ .Values.partyId }}-pv-claim
        {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    fateMoudle: mysql
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
      protocol: TCP
  type: {{ .Values.modules.mysql.type }}
  selector:
    fateMoudle: mysql
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
---
{{ end }}
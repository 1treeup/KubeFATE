########################################################
# Copyright 2019-2020 program was created VMware, Inc. #
# SPDX-License-Identifier: Apache-2.0                  #
########################################################

{{ if .Values.modules.python.include }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: python-config
  labels:
    fateMoudle: fateflow
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate
data:
  server_conf.json: |
    {
        "servers": {
            "proxy": {
                "host": "{{ .Values.modules.proxy.ip }}", 
                "port": 9370
            }, 
            "fateboard": {
                "host": "{{ .Values.modules.fateboard.ip }}", 
                "port": 8080
            }, 
            "roll": {
                "host": "{{ .Values.modules.roll.ip }}", 
                "port": 8011
            }, 
            "fateflow": {
                "host": "{{ .Values.modules.fateflow.ip }}", 
                "grpc.port": 9360,
                "http.port": 9380
            }, 
            "federation": {
                "host": "{{ .Values.modules.federation.ip }}", 
                "port": 9394
            }
        }
    }
  settings.py: |
    # -*- coding: utf-8 -*-
    import os
    
    from arch.api.utils import file_utils
    from arch.api.utils import log_utils
    from fate_flow.entity.runtime_config import RuntimeConfig
    from arch.api.utils.core import get_lan_ip
    import __main__
    
    from fate_flow.utils.setting_utils import CenterConfig
    
    WORK_MODE = 1
    USE_LOCAL_DATABASE = True
    
    # Local authentication switch
    USE_AUTHENTICATION = False
    PRIVILEGE_COMMAND_WHITELIST = []
    
    # Node check switch
    CHECK_NODES_IDENTITY = False
    
    # zookeeper
    USE_CONFIGURATION_CENTER = False
    ZOOKEEPER_HOSTS = ['127.0.0.1:2181']
    
    MAX_CONCURRENT_JOB_RUN = 5
    MAX_CONCURRENT_JOB_RUN_HOST = 10
    _ONE_DAY_IN_SECONDS = 60 * 60 * 24
    DEFAULT_GRPC_OVERALL_TIMEOUT = 60 * 1000  # ms
    JOB_DEFAULT_TIMEOUT = 7 * 24 * 60 * 60
    REDIS_QUEUE_DB_INDEX = 0
    
    DATABASE = {
        'name': '{{ .Values.mysql.mysql_database | default "fate" }}',
        'user': '{{ .Values.mysql.mysql_user | default "fate" }}',
        'passwd': '{{ .Values.mysql.mysql_password | default "fate_dev" }}',
        'host': '{{ .Values.modules.mysql.ip }}',
        'port': 3306,
        'max_connections': 100,
        'stale_timeout': 30,
    }
    
    REDIS = {
        'host': '{{ .Values.modules.redis.ip }}',
        'port': 6379,
        'password': '{{ .Values.redis.requirepass | default "fate_dev" }}',
        'max_connections': 500
    }
    
    '''
    Constants
    '''
    API_VERSION = "v1"
    ROLE = 'fateflow'
    SERVERS = 'servers'
    MAIN_MODULE = os.path.relpath(__main__.__file__)
    SERVER_MODULE = 'fate_flow_server.py'
    TASK_EXECUTOR_MODULE = 'driver/task_executor.py'
    DEFAULT_WORKFLOW_DATA_TYPE = ['train_input', 'data_input', 'id_library_input', 'model', 'predict_input',
                                  'predict_output', 'evaluation_output', 'intersect_data_output']
    HEADERS = {
        'Content-Type': 'application/json',
        'Connection': 'close'
    }
    # fate-serving
    SERVINGS_ZK_PATH = '/FATE-SERVICES/serving/online/publishLoad/providers'
    FATE_FLOW_ZK_PATH = '/FATE-SERVICES/flow/online/transfer/providers'
    FATE_FLOW_MODEL_TRANSFER_PATH = '/v1/model/transfer'
    # fate-manager
    FATE_MANAGER_GET_NODE_INFO = '/node/info'
    FATE_MANAGER_NODE_CHECK = '/node/management/check'
    
    # logger
    log_utils.LoggerFactory.set_directory(os.path.join(file_utils.get_project_base_directory(), 'logs', 'fate_flow'))
    stat_logger = log_utils.getLogger("fate_flow_stat")
    detect_logger = log_utils.getLogger("fate_flow_detect")
    access_logger = log_utils.getLogger("fate_flow_access")
     
    
    """
    Services 
    """
    IP = '0.0.0.0'
    GRPC_PORT = 9360
    HTTP_PORT = 9380
    # standalone job will be send to the standalone job server when FATE-Flow work on cluster deploy mode,
    # but not the port for FATE-Flow on standalone deploy mode.
    CLUSTER_STANDALONE_JOB_SERVER_PORT = 9381
    
    
    SERVER_CONF_PATH = 'arch/conf/server_conf.json'
    SERVING_PATH = '/servers/servings'
    server_conf = file_utils.load_json_conf(SERVER_CONF_PATH)
    PROXY_HOST = server_conf.get(SERVERS).get('proxy').get('host')
    PROXY_PORT = server_conf.get(SERVERS).get('proxy').get('port')
    BOARD_HOST = server_conf.get(SERVERS).get('fateboard').get('host')
    if BOARD_HOST == 'localhost':
        BOARD_HOST = get_lan_ip()
    BOARD_PORT = server_conf.get(SERVERS).get('fateboard').get('port')
    MANAGER_HOST = server_conf.get(SERVERS).get('fatemanager', {}).get('host')
    MANAGER_PORT = server_conf.get(SERVERS).get('fatemanager', {}).get('port')
    SERVINGS = CenterConfig.get_settings(path=SERVING_PATH, servings_zk_path=SERVINGS_ZK_PATH,
                                        use_zk=USE_CONFIGURATION_CENTER, hosts=ZOOKEEPER_HOSTS,
                                        server_conf_path=SERVER_CONF_PATH)
    BOARD_DASHBOARD_URL = 'http://%s:%d/index.html#/dashboard?job_id={}&role={}&party_id={}' % (BOARD_HOST, BOARD_PORT)
    RuntimeConfig.init_config(WORK_MODE=WORK_MODE)
    RuntimeConfig.init_config(HTTP_PORT=HTTP_PORT)
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: fateboard-config
  labels:
    fateMoudle: fateboard
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate
data:
  application.properties: |
    server.port=8080
    fateflow.url=http://{{ .Values.modules.fateflow.ip }}:9380
    spring.datasource.driver-Class-Name=com.mysql.cj.jdbc.Driver
    management.endpoints.web.exposure.include=*
    spring.http.encoding.charset=UTF-8
    spring.http.encoding.enabled=true
    server.tomcat.uri-encoding=UTF-8
    spring.datasource.url=jdbc:mysql://{{ .Values.modules.mysql.ip }}:3306/{{ .Values.mysql.mysql_database | default "fate" }}?characterEncoding=utf8&characterSetResults=utf8&autoReconnect=true&failOverReadOnly=false&serverTimezone=GMT%2B8
    spring.datasource.username={{ .Values.mysql.mysql_user | default "fate" }}
    spring.datasource.password={{ .Values.mysql.mysql_password | default "fate_dev" }}
    server.tomcat.max-threads=1000
    server.tomcat.max-connections=20000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python
  labels:
    fateMoudle: python
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      fateMoudle: python
      name: {{ .Values.partyName  | quote }}
      partyId: {{ .Values.partyId | quote  }}
  template:
    metadata:
      labels:
        fateMoudle: python
        name: {{ .Values.partyName | quote  }}
        partyId: {{ .Values.partyId | quote  }}
        owner: kubefate
        cluster: fate
    spec:
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "fateflow"
      initContainers:
      - image: mysql:8
        name: mysql
        env:
        - name: MYSQL_DATABASE
          value: {{ .Values.mysql.mysql_database }}
        - name: MYSQL_USER
          value: {{ .Values.mysql.mysql_user }}
        - name: MYSQL_PASSWORD
          value: {{ .Values.mysql.mysql_password }}
        - name: MYSQL_HOST
          value: mysql
        command:
        - /bin/bash
        - -c
        - |
          set -x
          function checkMySQL(){
            checkMySQLCount=0
            while true ; do
              checkMySQLCount=$[checkMySQLCount+1]
              echo "Waiting for mysql started. check count: $checkMySQLCount"
              sleep 2

              state=`mysqladmin ping -h ${MYSQL_HOST} -u${MYSQL_USER} -p${MYSQL_PASSWORD}| awk '{print $3}'`
              if [ "$state" == "alive" ]; then
                echo "mysql server has been already started."
              break
              fi
           done
          }
          echo "Waiting for mysql started..."
          checkMySQL
      containers:
        - image: {{ .Values.image.registry }}/python:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: python
          ports:
            - containerPort: 9360
            - containerPort: 9380
          volumeMounts:
            - mountPath: /data/projects/fate/python/eggroll/conf/server_conf.json
              name: python-confs
              subPath: server_conf.json
            - mountPath: /data/projects/fate/python/arch/conf/server_conf.json
              name: python-confs
              subPath: server_conf.json
            - mountPath: /data/projects/fate/python/fate_flow/settings.py
              subPath: settings.py
              name: python-confs
            - name: logs
              mountPath: /data/projects/fate/python/logs
        - image: {{ .Values.image.registry }}/fateboard:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: fateboard
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: /data/projects/fate/fateboard/conf/application.properties
              name: fateboard-confs
              subPath: application.properties
            - name: logs
              mountPath: /data/projects/fate/python/logs
      {{ if .Values.nodeSelector.python.value}}
      nodeSelector:
        {{ .Values.nodeSelector.python.nodeLabel }}: {{ .Values.nodeSelector.python.value }}
      {{ end }}
      restartPolicy: Always
      volumes:
        - name: python-confs
          configMap:
            name: python-config
        - name: fateboard-confs
          configMap:
            name: fateboard-config
        - name: logs
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: fateflow
  labels:
    fateMoudle: python
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate
spec:
  ports:
    - name: "9360"
      port: 9360
      targetPort: 9360
      protocol: TCP
    - name: "9380"
      port: 9380
      targetPort: 9380
      protocol: TCP
  type: {{ .Values.modules.fateflow.type }}
  selector:
    fateMoudle: python
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
---
apiVersion: v1
kind: Service
metadata:
  name: fateboard
  labels:
    fateMoudle: python
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
      protocol: TCP
  type: {{ .Values.modules.fateboard.type }}
  selector:
    fateMoudle: python
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
---
{{ end }}